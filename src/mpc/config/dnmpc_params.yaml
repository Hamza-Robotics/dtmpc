#QP solver to be used in the NLP solver. String in  
QP_solver: 'PARTIAL_CONDENSING_HPIPM'
nlp_solver_type : 'SQP'
cython_solver: False #[BOOL]
obstacle:  True  #[BOOL]
Number_obstacles: 3 #[INT]
print_acados_status: False #[BOOL]
integrator_type: 'ERK'  #'ERK', 'IRK', 'GNSF', 'DISCRETE', 'LIFTED_IRK'
nlp_solver_max_iter: 5 #[INT]
cost_type: "LINEAR_LS"

# MPC parameters
Update_Frequency: 1 #Â¤[Hz1
Prediction_Frequency: 10 #[hz]
Prediction_Length: 3 #[s]

### Input constraints 
velocity_max: 0.5 #  [m/s]
velocity_min: -0.5 # [m/s]
angle_velocity_max: 40.  # [degrees/s]
angle_velocity_min: -40. # [degrees/s]


### Error Distance constraints
ed_min: 0.1 # [m]
ed_max: 19.44 # [m]

ed_min_f: 0.1
ed_max_f: 19.02
### Error Distance constraints

eo_min: -100.2 # [rad]
eo_max: 100.2 # [rad]

eo_min_f: -100.01 # [rad]
eo_max_f: 100.01 # [rad]


# Slack variables
L2_Norm: 1.e+6
L1_Norm: 1.e+6

# Weighting matrices
#Q_matrix:  [1.e-6,1.e-6, 0,0,0]
#Q_matrix_e:  [1.e-0,1.e-0, 0,0,0]
#Q_matrix_waypoint: [1.e-5,1.e-5, 0,0,0]
#Q_matrix:          [1.e-5, 1.e-5,0,0,0,]

#Q_matrix:            [1.e+4,1.e+4,0,0,0]
Q_matrix_0:           [1.e+4,1.e+4,0, 0,0]
Q_matrix_i:           [1.e+3,1.e+3,0,0,0]
Q_matrix_e:           [1.e+3,1.e+3,0,0,0]
#Q_matrix_0:          [0,0,0,1.e+4,1.e+4]
#Q_matrix_i:          [0,0,0,1.e+4,1.e+0]
#Q_matrix_e:          [0,0,0,1.e+4,1.e+0]

#Q_matrix_waypoint: [0, 0]
R_matrix:  [1.e-9,1.e-9]